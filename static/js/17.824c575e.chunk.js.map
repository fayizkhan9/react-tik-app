{"version":3,"sources":["utils/api.js","content/users/index.js"],"names":["api","axios","create","baseURL","headers","interceptors","response","use","res","err","status","console","log","Promise","reject","Users","useState","tableData","setTableData","useEffect","get","data","localStorage","admin","getUsers","window","location","href","style","padding","margin","fontSize","item","xs","component","Paper","sx","minWidth","align","map","indx","username","email","emailStatus","diamonds","referalCode"],"mappings":"+KAAA,aAEMA,EAFN,OAEYC,EAAMC,OAAO,CACvBC,QAAS,wBACTC,QAAS,CACP,eAAgB,sBAYpBJ,EAAIK,aAAaC,SAASC,KACxB,SAAAC,GAAG,OAAIA,KACP,SAAAC,GAIE,OAH4B,MAAxBA,EAAIH,SAASI,QACfC,QAAQC,IAAI,mBAEPC,QAAQC,OAAOL,MAIXT,O,uLCsDAe,UA5DD,WAEZ,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,qBAAU,WAAM,sDAEd,8GACoBnB,IAAIoB,IAAI,qBAD5B,OACQZ,EADR,OAEEU,EAAaV,EAAIa,MAFnB,4CAFc,sBAOTC,aAAaC,MAPH,WAAD,wBAUZC,GAFAC,OAAOC,SAASC,KAAO,WAMxB,IAGD,mCACE,eAAC,IAAD,CAAMC,MAAO,CAAEC,QAAS,OAAQC,OAAQ,QAAxC,UACE,mBAAGF,MAAO,CAAEE,OAAQ,OAAQC,SAAU,QAAtC,SAAgD,8CAChD,cAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAgBC,UAAWC,IAA3B,SACE,eAAC,IAAD,CAAOC,GAAI,CAAEC,SAAU,KAAO,aAAW,eAAzC,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAWC,MAAM,SAAjB,oBACA,cAAC,IAAD,CAAWA,MAAM,SAAjB,uBACA,cAAC,IAAD,CAAWA,MAAM,SAAjB,mBACA,cAAC,IAAD,CAAWA,MAAM,SAAjB,0BACA,cAAC,IAAD,CAAWA,MAAM,SAAjB,sBACA,cAAC,IAAD,CAAWA,MAAM,SAAjB,+BAGJ,cAAC,IAAD,UACGrB,EAAUsB,KAAI,SAACP,EAAMQ,GAAP,OACb,eAAC,IAAD,WACE,cAAC,IAAD,CAAWF,MAAM,SAAjB,SAA2BE,EAAO,IAClC,cAAC,IAAD,CAAWF,MAAM,SAAjB,SAA2BN,EAAKS,WAChC,cAAC,IAAD,CAAWH,MAAM,SAAjB,SAA2BN,EAAKU,QAChC,cAAC,IAAD,CAAWJ,MAAM,SAAjB,SAA2BN,EAAKW,cAChC,cAAC,IAAD,CAAWL,MAAM,SAAjB,SAA2BN,EAAKY,WAChC,cAAC,IAAD,CAAWN,MAAM,SAAjB,SAA2BN,EAAKa,gBANnBL","file":"static/js/17.824c575e.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n/**\r\n intercept any error responses from the api\r\n and check if the token is no longer valid.\r\n ie. Token has expired or user is no longer\r\n authenticated.\r\n logout the user if the token has expired\r\n**/\r\n\r\napi.interceptors.response.use(\r\n  res => res,\r\n  err => {\r\n    if (err.response.status === 401) {\r\n      console.log(\"dispatch logout\")\r\n    }\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\nexport default api;\r\n","// ** React Imports\nimport { useState, useEffect } from 'react'\nimport api from 'src/utils/api'\n\n// ** Third Party Styles Imports\nimport 'react-datepicker/dist/react-datepicker.css'\n\n// ** MUI Imports\nimport Card from '@mui/material/Card'\nimport { Grid } from '@mui/material'\n\n\n// ** MUI TABLE Imports\nimport Paper from '@mui/material/Paper'\nimport Table from '@mui/material/Table'\nimport TableRow from '@mui/material/TableRow'\nimport TableHead from '@mui/material/TableHead'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\n\nconst Users = () => {\n\n  const [tableData, setTableData] = useState([])\n\n  useEffect(() => {\n\n    async function getUsers() {\n      const res = await api.get('/auth/getAllUsers')\n      setTableData(res.data)\n    }\n\n    if (!localStorage.admin) {\n      window.location.href = '/login'\n    } else {\n      getUsers();\n    }\n\n\n  }, [])\n\n  return (\n    <>\n      <Card style={{ padding: '15px', margin: '15px' }}>\n        <p style={{ margin: '10px', fontSize: '20px' }}><b> All Users </b></p>\n        <Grid item xs={12}>\n          <Card>\n            <TableContainer component={Paper}>\n              <Table sx={{ minWidth: 650 }} aria-label='simple table'>\n                <TableHead>\n                  <TableRow>\n                    <TableCell align='center'>Number</TableCell>\n                    <TableCell align='center'>User Name</TableCell>\n                    <TableCell align='center'>Email</TableCell>\n                    <TableCell align='center'>Email Status</TableCell>\n                    <TableCell align='center'>Diamonds</TableCell>\n                    <TableCell align='center'>Referal Code</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {tableData.map((item, indx) => (\n                    <TableRow key={indx}>\n                      <TableCell align='center'>{indx + 1}</TableCell>\n                      <TableCell align='center'>{item.username}</TableCell>\n                      <TableCell align='center'>{item.email}</TableCell>\n                      <TableCell align='center'>{item.emailStatus}</TableCell>\n                      <TableCell align='center'>{item.diamonds}</TableCell>\n                      <TableCell align='center'>{item.referalCode}</TableCell>\n\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Card>\n        </Grid>\n      </Card>\n    </>\n  )\n}\n\nexport default Users;\n"],"sourceRoot":""}